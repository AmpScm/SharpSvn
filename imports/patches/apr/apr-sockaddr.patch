Index: network_io/win32/sockets.c
===================================================================
--- network_io/win32/sockets.c	(revision 1540844)
+++ network_io/win32/sockets.c	(working copy)
@@ -322,24 +322,17 @@ APR_DECLARE(apr_status_t) apr_socket_connect(apr_s
 
     if (connect(sock->socketdes, (const struct sockaddr *)&sa->sa.sin,
                 sa->salen) == SOCKET_ERROR) {
+        rv = apr_get_netos_error();
+    }
+    else {
+        rv = APR_SUCCESS;
+    }
+
+    if (sock->timeout != 0 && rv == APR_FROM_OS_ERROR(WSAEWOULDBLOCK)) {
         int rc;
         struct timeval tv, *tvptr;
         fd_set wfdset, efdset;
 
-        rv = apr_get_netos_error();
-        if (rv != APR_FROM_OS_ERROR(WSAEWOULDBLOCK)) {
-            return rv;
-        }
-
-        if (sock->timeout == 0) {
-            /* Tell the app that the connect is in progress...
-             * Gotta play some games here.  connect on Unix will return 
-             * EINPROGRESS under the same circumstances that Windows 
-             * returns WSAEWOULDBLOCK. Do some adhoc canonicalization...
-             */
-            return APR_FROM_OS_ERROR(WSAEINPROGRESS);
-        }
-
         /* wait for the connect to complete or timeout */
         FD_ZERO(&wfdset);
         FD_SET(sock->socketdes, &wfdset);
@@ -371,7 +364,18 @@ APR_DECLARE(apr_status_t) apr_socket_connect(apr_s
             }
             return APR_FROM_OS_ERROR(rc);
         }
+
+        rv = APR_SUCCESS;
     }
+    else if (rv == APR_FROM_OS_ERROR(WSAEWOULDBLOCK)) {
+       /* Tell the app that the connect is in progress...
+        * Gotta play some games here.  connect on Unix will return
+        * EINPROGRESS under the same circumstances that Windows
+        * returns WSAEWOULDBLOCK. Do some adhoc canonicalization...
+        */
+        rv = APR_FROM_OS_ERROR(WSAEINPROGRESS);
+    }
+
     /* connect was OK .. amazing */
     sock->remote_addr = sa;
     if (sock->local_addr->sa.sin.sin_port == 0) {
@@ -385,7 +389,7 @@ APR_DECLARE(apr_status_t) apr_socket_connect(apr_s
          */
         sock->local_interface_unknown = 1;
     }
-    return APR_SUCCESS;
+    return rv;
 }
 
 APR_DECLARE(apr_status_t) apr_socket_type_get(apr_socket_t *sock, int *type)
