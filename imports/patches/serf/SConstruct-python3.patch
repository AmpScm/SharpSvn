Index: SConstruct
===================================================================
--- SConstruct	(revision 1879319)
+++ SConstruct	(working copy)
@@ -108,6 +108,9 @@ opts.AddVariables(
   BoolVariable('APR_STATIC',
                "Enable using a static compiled APR",
                False),
+  BoolVariable('STATIC_CRT',
+               "Enable using the static CRT on Windows",
+               False),
   RawListVariable('CC', "Command name or path of the C compiler", None),
   RawListVariable('CFLAGS', "Extra flags for the C compiler (space-separated)",
                   None),
@@ -140,7 +143,7 @@
     EnumVariable('MSVC_VERSION',
                  "Visual C++ to use for building",
                  None,
-                 allowed_values=('14.2', '14.1', '14.0', '12.0',
+                 allowed_values=('15.0', '14.4', '14.3', '14.2', '14.1', '14.0', '12.0',
                                  '11.0', '10.0', '9.0', '8.0', '6.0'),
                  map={'2005' :  '8.0',
                       '2008' :  '9.0',
@@ -149,6 +152,8 @@
                       '2013' : '12.0',
                       '2015' : '14.0',
                       '2017' : '14.1',
+                      '2019' : '14.2',
+                      '2022' : '14.3'
                      }),
 
     # We always documented that we handle an install layout, but in fact we
@@ -173,7 +178,7 @@ env.Append(BUILDERS = {
 match = re.search('SERF_MAJOR_VERSION ([0-9]+).*'
                   'SERF_MINOR_VERSION ([0-9]+).*'
                   'SERF_PATCH_VERSION ([0-9]+)',
-                  env.File('serf.h').get_contents(),
+                  env.File('serf.h').get_contents().decode("utf-8"),
                   re.DOTALL)
 MAJOR, MINOR, PATCH = [int(x) for x in match.groups()]
 env.Append(MAJOR=str(MAJOR))
@@ -205,6 +210,7 @@ if gssapi and os.path.isdir(gssapi):
 
 debug = env.get('DEBUG', None)
 aprstatic = env.get('APR_STATIC', None)
+static_crt = env.get('STATIC_CRT', None)
 
 Help(opts.GenerateHelpText(env))
 opts.Save(SAVED_CONFIG, env)
@@ -280,11 +286,11 @@ else:
   # Choose runtime and optimization
   if debug:
     # Disable optimizations for debugging, use debug DLL runtime
-    env.Append(CCFLAGS=['/Od', '/MDd'])
+    env.Append(CCFLAGS=['/Od', '/MTd' if static_crt else '/MDd'])
     env.Append(CPPDEFINES=['DEBUG', '_DEBUG'])
   else:
     # Optimize for speed, use DLL runtime
-    env.Append(CCFLAGS=['/O2', '/MD'])
+    env.Append(CCFLAGS=['/O2', '/MT' if static_crt else '/MD'])
     env.Append(CPPDEFINES=['NDEBUG'])
     env.Append(LINKFLAGS=['/RELEASE'])
 
@@ -316,7 +322,7 @@ if sys.platform == 'win32':
   if aprstatic:
     apr_libs='apr-1.lib'
     apu_libs='aprutil-1.lib'
-    env.Append(LIBS=['shell32.lib', 'xml.lib'])
+    env.Append(LIBS=['shell32.lib', 'libexpatMD.lib'])
   else:
     apr_libs='libapr-1.lib'
     apu_libs='libaprutil-1.lib'
@@ -342,7 +348,6 @@ if sys.platform == 'win32':
                LIBPATH=['$ZLIB'])
 
   # openssl
-  env.Append(LIBS=['libeay32.lib', 'ssleay32.lib'])
   if not env.get('SOURCE_LAYOUT', None):
     env.Append(CPPPATH=['$OPENSSL/include/openssl'],
                LIBPATH=['$OPENSSL/lib'])
@@ -352,6 +357,14 @@ if sys.platform == 'win32':
   else:
     env.Append(CPPPATH=['$OPENSSL/inc32'],
                LIBPATH=['$OPENSSL/out32dll'])
+  conf = Configure(env)
+  if conf.CheckLib('libcrypto'):
+    # OpenSSL 1.1.0+
+    env.Append(LIBS=['libcrypto.lib', 'libssl.lib'])
+  else:
+    # Legacy OpenSSL
+    env.Append(LIBS=['libeay32.lib', 'ssleay32.lib'])
+  conf.Finish()
 else:
   if os.path.isdir(apr):
     apr = os.path.join(apr, 'bin', 'apr-1-config')
