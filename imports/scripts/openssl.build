<?xml version="1.0" encoding="utf-8"?>
<project basedir=".." default="build">
  <property name="opensslDir" value="${platformRoot}/openssl" />
  <property name="libeayFullName" value="${dllPrefix}libeay32.dll" />
  <property name="libcryptoName" value="libeay32.lib" if="${opensslVersion &lt; '1.1.'}" />
  <property name="libcryptoName" value="libcrypto.lib" if="${opensslVersion &gt;= '1.1.'}" />
  <property name="libsslName" value="ssleay32.lib" if="${opensslVersion &lt; '1.1.'}" />
  <property name="libsslName" value="libssl.lib" if="${opensslVersion &gt;= '1.1.'}" />

  <property name="opensslMakefile" value="${opensslDir}\ms\nt.mak" if="${static and opensslVersion &lt; '1.1.'}" />
  <property name="opensslMakefile" value="${opensslDir}\ms\ntdll.mak" if="${not static and opensslVersion &lt; '1.1.'}" />
  <property name="opensslMakefile" value="${opensslDir}\makefile" if="${opensslVersion &gt;= '1.1.'}" />

  <target name="openssl-prepare" depends="checkout">
    <OnceBlock file="build/openssl-${opensslVersion}-${platform}.patched">
      <foreach item="File" property="patch">
        <in>
          <items basedir="${downloads}/../patches/openssl">
            <include name="*.patch" />
          </items>
        </in>
        <do>
          <Svn verbose="true">
            <arg value="patch" />
            <arg value="${patch}" />
            <arg value="${opensslDir}" />
          </Svn>
        </do>
      </foreach>
    </OnceBlock>
    <OnceBlock file="build/openssl-${opensslVersion}-${platform}.prepared">
      <exec program="perl.exe" workingdir="${opensslDir}">
        <arg value="Configure" />
        <arg value="VC-WIN32" if="${platform=='win32'}" />
        <arg value="VC-WIN64A" if="${platform=='x64'}" />
        <!-- Provide a sane, most likely secure default for loading system wide settings -->
        <arg value="--openssldir=C:\ProgramData\OpenSSL" />
        <!-- Now configure more -->
        <arg value="-D_CRT_NONSTDC_NO_DEPRECATE" />
        <arg value="-D_CRT_SECURE_NO_DEPRECATE" />
        <arg value="threads" />
        <arg value="no-asm" if="${opensslVersion &lt; '1.1.' and platform=='x64'}" />
        <arg value="no-dso" if="${static}" />
        <arg value="no-shared" if="${opensslVersion &lt; '1.1.'}" />
        <arg value="no-shared" if="${static and opensslVersion &gt; '1.1.'}" />
        <arg value="shared" if="${not static and opensslVersion &gt; '1.1.'}" />
        <arg value="no-krb5" if="${opensslVersion &lt; '1.1.'}" />
        <arg value="no-hw" />
        <arg value="no-ssl2" if="${opensslVersion &lt; '1.1.'}" />
        <arg value="no-ssl3" />
        <arg value="no-gost" if="${static}"/>
        <arg value="no-dtls" />
        <arg value="no-srp" />
        <arg value="no-unit-test" />
        <arg value="no-zlib" />
        <arg value="no-zlib-dynamic" />
        <arg value="enable-tlsext" if="${opensslVersion &lt; '1.1.'}" />
        <arg value="enable-capieng" />
        <arg value="enable-static-engine" if="${static}" />
        <!--arg value="enable-weak-ssl-ciphers" if="${opensslVersion &gt; '1.1.'}" /-->
        <arg value="-DSSL_FORBID_ENULL" />
        <arg value="-DOPENSSL_SSL_CLIENT_ENGINE_AUTO=capi" />
        <arg value="-DOPENSSL_CAPIENG_DIALOG" />
        <arg value="-D_WIN32_WINNT=0x0501" />
        <arg value="-D_WINSOCK_DEPRECATED_NO_WARNINGS" />
        <arg value="--prefix=${path::get-full-path(intDir)}" />
      </exec>
    </OnceBlock>
    <OnceBlock file="build/openssl-${opensslVersion}-${platform}.initialized">
      <exec program="cmd.exe" workingdir="${opensslDir}" if="${opensslVersion &lt; '1.1.' and platform=='win32'}">
        <arg line="/c ms\do_nasm.bat" />
      </exec>
      <exec program="cmd.exe" workingdir="${opensslDir}" if="${opensslVersion &lt; '1.1.' and platform=='x64'}">
        <arg line="/c ms\do_win64a.bat" />
      </exec>
      <foreach item="File" property="deffile" if="${opensslVersion &lt; '1.1.'}" >
        <in>
          <items basedir="${opensslDir}">
            <include name="ms/*.def" />
          </items>
        </in>
        <do>
          <FilterFile file="${deffile}" unless="${static}">
            <filterchain>
              <LineRegexReplace re="LIBRARY[\t ]+" to="LIBRARY ${dllPrefix}" />
            </filterchain>
          </FilterFile>
        </do>
      </foreach>
      <FilterFile file="${opensslMakefile}" unless="${static}">
        <filterchain>
          <replacestring from="$(LIB_D)\$(SSL).dll" to="$(LIB_D)\${dllPrefix}$(SSL).dll" if="${dllPrefix != ''}" />
          <replacestring from="$(LIB_D)\$(CRYPTO).dll" to="$(LIB_D)\${dllPrefix}$(CRYPTO).dll" if="${dllPrefix != ''}" />
          <replacestring from="LIBRARY lib" to="LIBRARY ${dllPrefix}lib" if="${dllPrefix != ''}" />
          <replacestring from="/out:$(O_SSL)" to="/out:$(O_SSL) /IMPLIB:$(L_SSL)" />
          <replacestring from="/out:$(O_CRYPTO)" to="/out:$(O_CRYPTO) /IMPLIB:$(L_CRYPTO)" />
          <replacestring from=" /MT " to=" /MD " />
          <LineRegexReplace re='lib(crypto|ssl)-[1-9_]+(-x64)?\.(dll|pdb)' to='${dllPrefix}$0' if="${dllPrefix != '' and opensslVersion &gt;= '1.1.'}" />
          <LineRegexReplace re='\s+\$\(CP\).*\$\(OPENSSLDIR\).*' to='# $0' />
          <LineRegexReplace re='^(MLFLAGS=.*)/subsystem:console' to='$1 /subsystem:windows /nxcompat /largeaddressaware /release' />
        </filterchain>
      </FilterFile>
      <FilterFile file="${opensslMakefile}" if="${static}">
        <filterchain>
          <!-- Ommit default library name -->
          <replacestring from=" /MT /Ox /O2 /Ob2 " to=" -MD -Ox -Gy ${ltcgFlags} " />
          <LineRegexReplace re='\s+\$\(CP\).*\$\(OPENSSLDIR\).*' to='# $0' />
        </filterchain>
      </FilterFile>
      <FilterFile file="${opensslDir}/engines/e_capi.c" if="${svnAddSharpSvn}">
        <filterchain>
          <replacestring from='static int cert_select_dialog(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs);' to='

#pragma comment(lib, "crypt32.lib")
typedef HWND (*sharpsvn_get_ui_parent_handler_t)();
extern sharpsvn_get_ui_parent_handler_t sharpsvn_get_ui_parent_handler;
sharpsvn_get_ui_parent_handler_t sharpsvn_get_ui_parent_handler = NULL;
static  int cert_select_dialog(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs);' />
          <replacestring from="hwnd = GetForegroundWindow();" to="hwnd = sharpsvn_get_ui_parent_handler ? sharpsvn_get_ui_parent_handler() : (HWND)-1; 
            if (hwnd == (HWND)-1) { idx = 0; goto err; }" />
        </filterchain>
      </FilterFile>
      <FilterFile file="${opensslDir}/crypto/rand/rand_win.c">
        <filterchain>
          <!-- If OpenSSL already used a *good* source for entropy, such as most likely
               CryptoAPI, don't start asking for kernel objects for up to 1 second, which might
               be very expensive on x64 where that many objects exist.
               
               BUT ONLY if we have GOOD entropy, or we introduce a huge security problem.
               
               ### The CryptoAPI random generator should be 'safe enough' on XP SP3 and later.
               (src: Wikipedia) Should we check for that or trust the rest of the data?
          -->
          <replacestring from="BYTE buf[64];" to="BYTE buf[4*64];" /><!-- Ask more entropy -->
          <replacestring from="RAND_add(buf, sizeof(buf), 0);" to="RAND_add(buf, sizeof(buf), sizeof(buf) / 4.0); /* SharpSvn */" />
          <replacestring from="if (kernel)" to="if (good &amp;&amp; kernel) { FreeLibrary(kernel); } else if (kernel /* &amp;&amp; !good*/)" />
          <replacestring from="!defined(OPENSSL_SYS_WIN32_CYGWIN)" to="0 &amp;&amp; ! defined(OPENSSL_SYS_WIN32_CYGWIN)" />
        </filterchain>
      </FilterFile>
      <property name="opensslconf" value="${opensslDir}/crypto/opensslconf.h" if="${opensslVersion &lt; '1.1.'}" />
      <property name="opensslconf" value="${opensslDir}/include/openssl/opensslconf.h.in" unless="${opensslVersion &lt; '1.1.'}" />
      <FilterFile file="${opensslconf}">
        <filterchain>
          <replacestring from='#define ENGINESDIR "' to='#define ENGINESDIR  "C:\\ProgramData\\OpenSSL\\Engines" //' />
        </filterchain>
      </FilterFile>
      <FilterFile file="${opensslDir}/crypto/engine/eng_list.c">
        <filterchain>
          <replacestring from='load_dir = ENGINESDIR;' to='{
    static int engines_initialized = 0; 
    static char engines_path[4*MAX_PATH] = "";
    
    if (!engines_initialized)
    {
        HMODULE hm = NULL;

        engines_initialized = 1;

        if (GetModuleHandleExA(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT, (LPCSTR) &amp;ENGINE_by_id, &amp;hm))
        {
            char *last_bs;
            DWORD r = GetModuleFileNameA(hm, engines_path, sizeof(engines_path));

            if ((r &gt; 0) &amp;&amp; (r &lt; (sizeof(engines_path)-10)))
            {
                last_bs = (char*)strrchr(engines_path, "\\"[0]);

                if (last_bs)
                {
                    *last_bs = 0;
                    strcat(engines_path, "\\engines");
                }
                else
                    engines_path[0] = 0;
            }
            else
                engines_path[0] = 0;
        }
    }
    if (*engines_path)
      load_dir = engines_path;
    else
      load_dir =  ENGINESDIR;
}' />
        </filterchain>
      </FilterFile>
    </OnceBlock>
  </target>
  <target name="openssl-build" depends="openssl-prepare">
    <OnceBlock file="build/openssl-${opensslVersion}-${platform}.build">
      <NMake workingdir="${opensslDir}" makeFile="${opensslMakefile}" />
      <NMake workingdir="${opensslDir}" makeFile="${opensslMakefile}">
        <arg value="install_sw" />
      </NMake>
    </OnceBlock>
    <property name="binDir" value="${opensslDir}/out32dll" if="${opensslVersion &lt; '1.1.'}" />
    <property name="binDir" value="${opensslDir}" if="${opensslVersion &gt;= '1.1.'}" />
    <copy todir="${intDir}/bin" unless="${static}">
      <fileset basedir="${binDir}">
        <include name="*.pdb" />
        <include name="*.dll" if="${opensslVersion &gt;= '1.1.'}" />
        <exclude name="lib.*" />
      </fileset>
    </copy>
    <copy todir="${intDir}/lib" if="${opensslVersion &gt;= '1.1.'}" >
      <fileset basedir="${opensslDir}">
        <include name="*.lib" />
        <exclude name="lib.*" />
      </fileset>
    </copy>
    <property name="enginesDir" value="${opensslDir}/out32dll" if="${opensslVersion &lt; '1.1.'}" />
    <property name="enginesDir" value="${opensslDir}/engines" if="${opensslVersion &gt;= '1.1.'}" />
    <copy todir="${intDir}/bin/engines" unless="${static}">
      <fileset basedir="${enginesDir}">
        <include name="capi.*" />
      </fileset>
    </copy>
    <copy todir="${intDir}/include" if="${opensslVersion &gt;= '1.1.'}" >
      <fileset basedir="${opensslDir}/include">
        <include name="openssl/**" />
      </fileset>
    </copy>
    <copy todir="${release}/include">
      <fileset basedir="${intDir}/include">
        <include name="openssl/**" />
      </fileset>
    </copy>
  </target>
</project>
