<?xml version="1.0" ?>
<project basedir=".." default="build">
  <property name="intl" value="sharpsvn" overwrite="false" />
  <property name="svnBuildName" value="SharpSvn" overwrite="false" />
  <property name="svnBase" value="${platformRoot}/subversion" />
  <property name="subversionMergeBranches" value="" overwrite="false" />

  <target name="svn-prepare" depends="svn-merge, build-bdb, build-zlib, build-openssl, build-apr, build-gettext, build-sqlite, sharpintl-build">

    <!-- Fake direct result for subversion to hide platforms -->
    <copy todir="build/${platform}/lib/include">
      <fileset basedir="${release}/include/apr-1">
        <include name="**/*.h" />
      </fileset>
    </copy>
    <copy todir="build/${platform}/lib/xml/expat/lib" file="release/include/apr-1/expat.h" />
    <copy todir="build/${platform}/lib/include">
      <fileset basedir="${aprDir}/include">
        <include name="arch/win32/**.h" />
      </fileset>
    </copy>
    <copy todir="build/${platform}/lib/include">
      <fileset basedir="${release}/include">
        <include name="**.h" />
      </fileset>
    </copy>
    <if test="${platform == 'win32'}">
      <copy todir="build/win32/lib/lib">
        <fileset basedir="${release}/lib">
          <include name="libdb*.lib" />
          <include name="libeay32.lib" />
          <include name="ssleay32.lib" />
          <include name="intl3_svn.lib" />
          <include name="xml.lib" />
          <include name="*apr-1.lib" />
          <include name="*aprutil-1.lib" />
        </fileset>
      </copy>
    </if>
    <if test="${platform == 'x64'}">
      <copy todir="${release}/lib-x64">
        <fileset basedir="SharpSvn-SvnI18n/bin/${platform}/release">
          <include name="*.lib" />
        </fileset>
      </copy>
      <copy todir="build/x64/lib/lib">
        <fileset basedir="${release}/lib-x64">
          <include name="xml.lib" />
          <include name="libeay32.lib" />
          <include name="ssleay32.lib" />
          <include name="*apr-1.lib" />
          <include name="*aprutil-1.lib" />
          <include name="intl3_svn.lib" />
          <include name="libdb*.lib" />
        </fileset>
      </copy>
    </if>
    <copy todir="build/${platform}/lib/include" flatten="true">
      <fileset basedir="${dbWindowsDir}">
        <include name="*.h" />
      </fileset>
    </copy>
    <copy tofile="build/${platform}/lib/release/libapr-1.lib" file="build/${platform}/lib/lib/apr-1.lib" if="${static=='true'}" />
    <copy tofile="build/${platform}/lib/release/libaprutil-1.lib" file="build/${platform}/lib/lib/aprutil-1.lib" if="${static=='true'}" />
    <copy todir="build/${platform}/lib/include" flatten="true" if="${javaHome != ''}">
      <fileset basedir="${javaHome}/include">
        <include name="*.h" />
        <include name="win32/*.h" />
      </fileset>
    </copy>      
  </target>

  <target name="svn-merge" depends="checkout">
    <if test="${buildSubversion != 'false'}">
      <OnceBlock file="build/subversion-${subversionVersion}_${platform}.merged">
        <foreach item="String" property="branch" in="${subversionMergeBranches}" delim=";"
           if="${string::get-length(subversionMergeBranches) &gt; 0}">
          <Svn verbose="true" if="${string::get-length(string::trim(branch)) &gt; 0}">
            <arg value="merge" />
            <arg line="^/subversion/${branch}" />
            <arg value="${svnBase}" />
          </Svn>
        </foreach>
        <if test="${applyMerges}">
          <echo append="true" file="${svnBase}/subversion/libsvn_subr/auth.c" if="${svnAddSharpSvn == 'true'}">
            /* Appended by sharpsvn/imports/scripts/build-subversion.build */
            apr_hash_t* sharpsvn_svn_auth_get_credentials_cache(svn_auth_baton_t *auth_baton)
            {
            if (!auth_baton)
            return NULL;

            return auth_baton->creds_cache;
            }
          </echo>

          <if test="${svnAddSharpSvn == 'true'}">
            <loadfile file="${svnBase}/subversion/libsvn_fs_base/fs.c" property="projtext">
              <filterchain>
                <replacestring from='if (loader_version->major != SVN_VER_MAJOR)'
                         to='SVN_ERR(check_bdb_availability()); if (loader_version->major != SVN_VER_MAJOR)' if="${applyMerges=='true'}" />
              </filterchain>
            </loadfile>
            <echo message="${projtext}" file="${svnBase}/subversion/libsvn_fs_base/fs.c" />
            
            <loadfile file="${svnBase}/subversion/libsvn_subr/io.c" property="projtext">
              <filterchain>
                <replacestring from='|| os_err == ERROR_DIR_NOT_EMPTY)'
                                 to='|| os_err == ERROR_DIR_NOT_EMPTY) &amp;&amp; sharpsvn_retry(retries, err, os_err, #expr)' />
              </filterchain>
            </loadfile>
            <echo message="${projtext}" file="${svnBase}/subversion/libsvn_subr/io.c" />
          </if>
        </if>
      </OnceBlock>
      <OnceBlock file="build/subversion-${subversionVersion}_${platform}.patched" if="${applyPatches=='true'}">
        <foreach item="File" property="patch">
          <in>
            <items basedir="${downloads}/../patches/subversion">
              <include name="*.patch" />
            </items>
          </in>
          <do>
            <ApplyPatch patchFile="${patch}" toDir="${svnBase}" />
          </do>
        </foreach>
      </OnceBlock>
    </if>
  </target>

  <target name="generate-svnfiles" depends="checkout, build-bdb, build-zlib, build-openssl, build-apr, build-sasl, svn-prepare">

    <OnceBlock file="build/subversion-${subversionVersion}_${platform}.generated" if="${buildSubversion!='false'}">

      <exec program="python.exe" workingdir="${svnBase}" verbose="true">
        <arg value="gen-make.py" />
        <arg line="-t vcproj" />
        <arg line="--vsnet-version=${VSversion}" />
        <arg value="--release" />
        <arg value="--with-httpd=../../httpd" if="${(buildHttpd == 'true') and (platform == 'win32')}" />
        <arg value="--with-apr=../lib" />
        <arg value="--with-apr-util=../lib" />
        <arg value="--with-berkeley-db=../lib" />
        <arg value="--with-openssl=../openssl" />
        <arg value="--with-zlib=${zlibDir}" />
        <arg value="--with-neon=../neon" if="${subversionVersion &lt; '1.8.'}" />
        <arg value="--with-serf=../serf" />
        <arg value="--with-sasl=../lib" />
        <arg value="--with-swig=${path::get-full-path(swigDir)}" if="${property::exists('withSwig')}" />
        <arg value="--with-sqlite=${intDir}" />
        <arg value="--with-junit=${junitJar}" if="${javaHome != ''}" />
        <arg value="--enable-nls" if="${intl != 'none'}"/>
        <arg value="--disable-shared" if="${(static=='true') or (svnStatic=='true')}"/>
        <arg value="--with-static-apr" if="${static=='true'}" />
      </exec>
      <!-- The ZLib build has already completed -->

      <echo message="@echo off" file="${svnBase}/build/win32/build_zlib.bat" />

      <!-- Replace shared library builds with static builds; to auto change dependencies -->
      <foreach item="File" property="vcproj" if="${static != 'true'}">
        <in>
          <items basedir="${svnBase}">
            <include name="build/win32/**/*.vcproj" />
            <include name="../serf/serf.vcproj" />
          </items>
        </in>
        <do>
          <loadfile file="${vcproj}" property="projtext">
            <filterchain>
              <replacestring from='AdditionalDependencies="zlibstat.lib' to='AdditionalDependencies="Rpcrt4.lib Mswsock.lib Ws2_32.lib libeay32.lib ssleay32.lib zlibstat.lib' />
              <replacestring from='AdditionalDependencies="advapi32.lib' to='AdditionalDependencies="Rpcrt4.lib Mswsock.lib Ws2_32.lib libeay32.lib ssleay32.lib advapi32.lib' />
              <!-- Increase security a little little bit in some cases -->
              <replacestring from='OutputFile="$(OutDir)\libsvn_' to='OutputFile="$(OutDir)\${dllPrefix}svn_' if="${(static != 'true') and (dllPrefix != '')}"/>
            </filterchain>
          </loadfile>
          <echo message="${projtext}" file="${vcproj}" />
        </do>
      </foreach>
      <echo file="build/subversion-${subversionVersion}_${platform}-version.txt" message="?" />
      <exec program="svnversion.exe" output="build/subversion-${subversionVersion}_${platform}-version.txt" failonerror="false">
        <arg value="-n" />
        <arg value="${svnBase}/subversion/" />
      </exec>
      <loadfile file="build/subversion-${subversionVersion}_${platform}-version.txt" property="svnWcVersion">
        <filterchain>
          <replacestring from='M' to='' />
          <replacestring from='S' to='' />
        </filterchain>
      </loadfile>
      <if test="${string::get-length(svnWcVersion) &gt; 20}">
        <property name="svnWcVersion" value="?" />
      </if>

      <!-- Trim whitespace (and the newline added by NAnt) -->
      <property name="svnWcVersion" value="${string::trim(svnWcVersion)}" />

      <!-- Add more version information to the subversion binaries and functions -->
      <property name="vVer" value="${subversionVersion}" />
      <property name="vVer" value="${subversionVersion}@${svnWcVersion}" if="${svnBuildType!='tag'}" />
      <property name="vDesc" value=":${svnBuildType}/${subversionVersion}@${svnWcVersion}" if="${svnBuildType!='tag'}" />
      <property name="vDesc" value="/${subversionVersion}" if="${svnBuildType=='tag'}" />
      <property name="vPlatform" value="${platform}" />
      <property name="vPlatform" value="win64-x64" if="${platform=='x64'}" />
      <property name="buildType" value="" />
      <property name="buildType" value="-${svnBuildType}" if="${svnBuildType!='tag'}" />
      <echo append="true" file="${svnBase}/subversion/include/svn_version.h">
        #pragma once
        #undef SVN_VER_TAG
        #undef SVN_VER_NUMTAG
        #define SVN_VER_TAG  " (${svnBuildName}${vDesc}) ${string::to-upper(platform)}"
        #ifndef SHARPSVN_INFO
        #define SVN_VER_NUMTAG "-${svnBuildName + buildType}-${vVer}-${string::to-upper(platform)}"
        #else
        #define SVN_VER_NUMTAG "-${svnBuildName + buildType}-${vVer}"
        #endif
      </echo>
    </OnceBlock>
  </target>

  <target name="build-svn" depends="build-bdb,build-zlib,build-openssl,build-serf,build-swig,prepare-neon,generate-svnfiles,build-httpd">
    <OnceBlock file="build/subversion-${subversionVersion}_${platform}.build">
      <!-- Now build subversion -->
      <MSBuild>
        <arg value="${svnBase}/subversion_vcnet.sln" />
        <!--arg value="/verbosity:quiet" /-->
        <arg value="/p:Configuration=Release" />
        <arg value="/p:Platform=${platform}" />
        <arg value="/t:Programs\svn" />
        <arg value="/t:Programs\svnadmin" />        
        <arg value="/t:Programs\svnversion" />
        <arg value="/t:Programs\svnserve" if="${static!='true'}"/>
        <arg value="/t:Programs\svnsync" />
        <arg value="/t:Programs\svnlook" />
        <arg value="/t:Programs\svnmucc"/>
        <arg value="/t:Programs\svnauthz-validate" />
        <arg value="/t:Programs\svndumpfilter" />
        <arg value="/t:Programs\svnrdump" />
        <arg value="/t:Programs\svn-populate-node-origins-index" />
        <arg value="/t:__SWIG_PERL__" if="${property::exists('withSwig')}" />
        <arg value="/t:__SWIG_PYTHON__" if="${property::exists('withSwig')}" />
        <arg value="/t:__JAVAHL__" if="${javaHome != ''}" />
      </MSBuild>
    </OnceBlock>
  </target>
  <target name="copy-result" depends="build-svn,misc-copy,copy-licenses,gettext-translate,copy-serf">
    <copy todir="${release}/lib" flatten="true">
      <fileset basedir="build/win32">
        <include name="subversion/${Configuration}/**/*.lib" />
        <include name="subversion/${Configuration}/**/*.pdb" />
        <!-- Don't copy pdb's for executables -->
        <exclude name="subversion/${Configuration}/**/svn*.pdb" />
        <include name="neon/**/*.lib" />
        <include name="neon/**/*.pdb" />
        <include name="serf/${Configuration}/*.lib" />
        <include name="serf/${Configuration}/*.pdb" />

        <!-- Don't copy the GPL as a *.lib file -->
        <exclude name="neon/src/COPYING.LIB" />
      </fileset>
    </copy>
    <copy todir="${release}/lib-x64" flatten="true">
      <fileset basedir="build/x64">
        <include name="subversion/${Configuration}/**/*.lib" />
        <include name="subversion/${Configuration}/**/*.pdb" />
        <!-- Don't copy pdb's for executables -->
        <exclude name="subversion/${Configuration}/**/svn*.pdb" />
        <include name="neon/**/*.lib" />
        <include name="neon/**/*.pdb" />
        <include name="serf/${Configuration}/*.lib" />
        <include name="serf/${Configuration}/*.pdb" />

        <!-- Don't copy the GPL as a *.lib file -->
        <exclude name="neon/src/COPYING.LIB" />
      </fileset>
    </copy>
    <if test="${platform!='win32'}">
      <copy file="${svnBase}/release/subversion/svn/svn.exe" tofile="${release}/bin/svn-${platform}.exe" />
      <copy file="${svnBase}/release/subversion/svnserve/svnserve.exe" tofile="${release}/bin/svnserve-${platform}.exe" if="${static!='true'}"/>
      <copy file="${svnBase}/release/subversion/svnadmin/svnadmin.exe" tofile="${release}/bin/svnadmin-${platform}.exe" />
      <copy file="${svnBase}/release/subversion/svnversion/svnversion.exe" tofile="${release}/bin/svnversion-${platform}.exe" />
    </if>
    <if test="${platform=='win32'}">
      <copy todir="${release}/bin" flatten="true">
        <fileset basedir="${svnBase}/release">
          <include name="**/*.dll" />
          <include name="**/*.exe" />
          <include name="**/*.pdb" />
          <exclude name="**/*-test*" />
        </fileset>
      </copy>
    </if>
    <copy todir="${release}/include">
      <fileset basedir="${svnBase}\subversion\include">
        <include name="**/*.h" />
        <include name="${svnBase}\subversion\svn_private_config.h" />
      </fileset>
    </copy>
    <copy todir="${release}/include/svn-internal">
      <fileset basedir="${svnBase}/subversion">
        <include name="libsvn_client/client.h" />
        <include name="libsvn_subr/config_impl.h" />
      </fileset>
    </copy>
    <copy todir="${release}/include/serf">
      <fileset basedir="${platformRoot}\serf">
        <include name="**/*.h" />
      </fileset>
    </copy>
    <copy todir="${release}/include/neon">
      <fileset basedir="${platformRoot}\neon\src">
        <include name="**/*.h" />
      </fileset>
    </copy>
    <copy todir="${release}/include/apr-1">
      <fileset basedir="${platformRoot}\apr\include">
        <include name="**.h" />
      </fileset>
    </copy>
    <copy todir="${release}/include/apr-1">
      <fileset basedir="${platformRoot}\apr-util\include">
        <include name="**.h" />
      </fileset>
    </copy>
    <echo file="${release}/copylibs.cmd">
      @echo off
      xcopy /y /q "..\..\imports\release\bin\*-%1.dll" %2

    </echo>
    <copy todir="${release}/po" flatten="true">
      <fileset basedir="${platformRoot}\subversion\subversion">
        <include name="**/*.po" />
      </fileset>
    </copy>
    <copy tofile="${release}/include/sharpsvn-imports.h" file="${downloads}/../scripts/sharpsvn-imports.h" if="${applyMerges=='true'}"/>
  </target>
</project>
