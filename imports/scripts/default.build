<?xml version="1.0" ?>
<project basedir=".." default="build">
	<property name="Configuration" value="Release" />
	<property name="dllPrefix" value="SharpSvn-" />
	<property name="dbDllName" value="SharpSvn-DB${string::replace(dbVersion, '.','-')}" />

	<if test="${platform != 'win32' and platform != 'x64'}">
		<fail message="Platform must be win32 or x64 at this time" />
	</if>

	<property name="build-WIN32" value="true" />
	<property name="build-WIN64-X64" value="false" />

	<setenv>
		<variable name="OPENSSL_STATIC" value="1" />
	</setenv>

	<property name="Configuration" value="release" />
	<property name="release" value="release" />

	<include buildfile="tasks.build" />

	<include buildfile="build-bdb.build" />
	<include buildfile="build-zlib.build" />
	<include buildfile="build-openssl.build" />
	<include buildfile="build-sqlite.build" />
	<include buildfile="build-serf.build" />

	<target name="clean">
		<delete>
			<fileset basedir="build" defaultexcludes="false">
				<include name="**" />
			</fileset>
		</delete>
	</target>

	<target name="distclean" depends="clean">
		<delete>
			<fileset basedir="downloads">
				<include name="**" />
			</fileset>
		</delete>
		<delete>
			<fileset basedir="release">
				<include name="**" />
			</fileset>
		</delete>
	</target>

	<property name="opensslFilename" value="openssl-${opensslVersion}.tar.gz" />
	<property name="dbFilename" value="db-${dbVersion}.tar.gz" />
	<property name="zlibFilename" value="zlib-${zlibVersion}.tar.gz" />
	<property name="sqliteFilename" value="sqlite-source-${string::replace(sqliteVersion,'.','_')}.zip" />
	<property name="nunitFilename" value="NUnit-${nunitVersion}-net-2.0.zip" />
	<target name="download">
		<mkdir dir="downloads" />
		<if test="${not file::exists('downloads/' + opensslFilename)}">
			<get src="http://www.openssl.org/source/${opensslFilename}" dest="downloads/${opensslFilename}" />
		</if>
		<if test="${not file::exists('downloads/' + dbFilename)}">
			<get src="http://download.oracle.com/berkeley-db/${dbFilename}" dest="downloads/${dbFilename}" />
		</if>
		<if test="${not file::exists('downloads/' + zlibFilename)}">
			<get src="http://www.zlib.net/${zlibFilename}" dest="downloads/${zlibFilename}" />
		</if>
		<if test="${not file::exists('downloads/' + sqliteFilename)}">
			<get src="http://www.sqlite.org/${sqliteFilename}" dest="downloads/${sqliteFilename}" />
		</if>
		<if test="${not file::exists('downloads/' + nunitFilename)}">
			<get src="http://switch.dl.sourceforge.net/sourceforge/nunit/${nunitFilename}" dest="downloads/${nunitFilename}" />
		</if>
	</target>

	<property name="sqliteDir" value="${'build/sqlite-' + sqliteVersion}" />
	<property name="nunitDir" value="${'build/nunit-' + nunitVersion}" />
	<target name="extract" depends="download">
		<mkdir dir="build" />
		<if test="${not directory::exists('build/' + platform + '/openssl-' + opensslVersion)}">
			<UnTar tarfile="downloads/${opensslFilename}" todir="build/${platform}" compresstype="gzip" />
		</if>
		<if test="${not directory::exists('build/db-' + dbVersion)}">
			<UnTar tarfile="downloads/${dbFilename}" todir="build" compresstype="gzip" />
		</if>
		<if test="${not directory::exists('build/zlib-' + zlibVersion)}">
			<UnTar tarfile="downloads/${zlibFilename}" todir="build" compresstype="gzip" />
		</if>
		<if test="${not directory::exists(sqliteDir)}">
			<unzip zipfile="downloads/${sqliteFilename}" todir="${sqliteDir}"  />
		</if>
		<if test="${not directory::exists(nunitDir)}">
			<unzip zipfile="downloads/${nunitFilename}" todir="${nunitDir}"  />
		</if>
	</target>
	<target name="checkout">
		<property name="svnBase" value="build/${platform}/subversion" />
		<if test="${not directory::exists(svnBase)}">
			<Svn verbose="true">
				<arg line="--non-interactive co" />
				<arg value="http://svn.collab.net/repos/svn/tags/${subversionVersion}/" unless="${svnTrunkBuild == 'true'}" />
				<arg value="http://svn.collab.net/repos/svn/trunk/" if="${svnTrunkBuild == 'true'}" />
				<arg value="${svnBase}" />
			</Svn>
		</if>
		<if test="${not directory::exists(svnBase + '/neon')}">
			<Svn verbose="true">
				<arg line="co" />
				<arg value="http://svn.webdav.org/repos/projects/neon/tags/${neonVersion}/" />
				<arg value="${svnBase}/neon" />
			</Svn>
			<!-- Write version for subversion configure script -->
			<echo message="${neonVersion}" file="${svnBase}/neon/.version" />
		</if>
		<if test="${not directory::exists(svnBase + '/apr')}">
			<Svn verbose="true">
				<arg line="co" />
				<arg value="${httpOrHttps}://svn.apache.org/repos/asf/apr/apr/tags/${aprVersion}/" />
				<arg value="${svnBase}/apr" />
			</Svn>
		</if>
		<if test="${not directory::exists(svnBase + '/apr-util')}">
			<Svn verbose="true">
				<arg line="co" />
				<arg value="${httpOrHttps}://svn.apache.org/repos/asf/apr/apr-util/tags/${aprUtilVersion}/" />
				<arg value="${svnBase}/apr-util" />
			</Svn>
		</if>
		<if test="${not directory::exists(svnBase + '/serf')}">
			<Svn verbose="true">
				<arg line="co" />
				<arg value="http://serf.googlecode.com/svn/tags/${serfVersion}/" />
				<arg value="${svnBase}/serf" />
			</Svn>
		</if>
	</target>
	<target name="prepare-neon" depends="checkout">
		<OnceBlock file="build/neon-${neonVersion}_${platform}.prepared">
			<regex pattern="^(?'NEON_MAJOR_VERSION'\d+)\.(?'NEON_MINOR_VERSION'\d+)\.(?'NEON_MICRO_VERSION'\d+)$" input="${neonVersion}" />
			<loadfile file="${svnBase}/neon/config.hw.in" property="configfile">
				<filterchain>
					<replacetokens begintoken="@" endtoken="@">
						<token key="VERSION" value="${NEON_MAJOR_VERSION}.${NEON_MINOR_VERSION}.${NEON_MICRO_VERSION}" />
						<token key="MAJOR" value="${NEON_MAJOR_VERSION}" />
						<token key="MINOR" value="${NEON_MINOR_VERSION}" />
					</replacetokens>
				</filterchain>
			</loadfile>
			<echo file="${svnBase}/neon/config.hw" message="${configfile}" unless="${file::exists(svnBase + '/neon/config.hw')}" />
			<echo file="${svnBase}/neon/config.h" message="${configfile}" unless="${file::exists(svnBase + '/neon/config.h')}" />
			<echo file="${svnBase}/neon/src/neon_version.h" message='#define NEON_VERSION "${NEON_MAJOR_VERSION}.${NEON_MINOR_VERSION}.${NEON_MICRO_VERSION}"' />
		</OnceBlock>
	</target>

	<target name="upgrade-apr" depends="checkout">
		<OnceBlock file="build/apr-${aprVersion}_${platform}.upgraded">
			<foreach item="File" property="project">
				<in>
					<items basedir="${svnBase}">
						<include name="apr/**/*.dsp" />
						<include name="apr-util/**/*.dsp" />
					</items>
				</in>
				<do>
					<VCBuild platform="${platform}">
						<arg line="/upgrade" />
						<arg line="${project}" />
					</VCBuild>
				</do>
			</foreach>
		</OnceBlock>
	</target>
	<target name="prepare-apr" depends="upgrade-apr">
		<OnceBlock file="build/apr-${aprVersion}_${platform}.prepared">
			<foreach item="File" property="winHeader">
				<in>
					<items basedir="${svnBase}">
						<include name="**/*.hw" />
						<include name="apr-util/**/expat.h.in" />
					</items>
				</in>
				<do>
					<property name="winHeader2" value="${string::replace(string::replace(winHeader, '.h.in', '.h'), '.hw', '.h')}" />
					<if test="${not file::exists(winHeader2)}">
						<loadfile file="${winHeader}" property="headertext">
							<filterchain>
								<replacestring from='#define APU_HAVE_APR_ICONV     1' to='#define APU_HAVE_APR_ICONV     0' />
							</filterchain>
						</loadfile>
						<echo message="${headertext}" file="${winHeader2}" />
					</if>
				</do>
			</foreach>
		</OnceBlock>
	</target>
	<target name="generate-svnfiles" depends="build-bdb, build-zlib, build-openssl, build-sqlite, checkout, prepare-apr">
		<OnceBlock file="build/subversion-${subversionVersion}_${platform}.generated">
			<!-- Patches for x64 builds; hopefully included in svn 1.5 -->
			<copy todir="${svnBase}/build/generator/" overwrite="true">
				<fileset basedir="scripts">
					<include name="*.ezt" />
				</fileset>
			</copy>
			<copy todir="${svnBase}/subversion/libsvn_subr" overwrite="true">
				<fileset basedir="scripts">
					<include name="win32_crashrpt.c" />
					<include name="win32_crashrpt.h" />
					<include name="win32_crashrpt_dll.h" />
				</fileset>
			</copy>
			<loadfile file="${svnBase}/build/generator/gen_win.py" property="gen_win">
				<filterchain>
					<replacestring from="popen('ml /help" to="popen('unavailable-ml /help" />
					<!-- Allow compilation for x64 -->
					<replacestring from="self.platforms = ['Win32']" to="self.platforms = ['Win32', 'x64']" />
				</filterchain>
			</loadfile>
			<echo message="${gen_win}" file="${svnBase}/build/generator/gen_win.py" />
			
			<exec program="python.exe" failonerror="false" resultproperty="pythonAvailable" verbose="true" />
			
			<exec program="cmd.exe" workingdir="${svnBase}" verbose="true">
				<arg line="/c gen-make.py" if="${pythonAvailable != '0'}" />
				<arg line="/c python.exe gen-make.py" if="${pythonAvailable == '0'}" />
				<arg line="-t vcproj" />
				<arg line="--vsnet-version=2005" />
				<arg value="--release" />
				<arg value="--with-berkeley-db=../../db-${dbVersion}/${platform}" />
				<arg value="--with-openssl=../openssl-${opensslVersion}" />
				<arg value="--with-zlib=../../zlib-${zlibVersion}" />
				<arg value="--with-serf=serf" />
				<arg value="--with-sqlite=../../sqlite-${sqliteVersion}" unless="${subversionVersion &lt; '1.5'}" />
				<arg value="--disable-shared" unless="${subversionVersion &lt; '1.5'}" />
			</exec>

			<!-- Replace shared library builds with static builds; to auto change dependencies -->
			<foreach item="File" property="vcproj">
				<in>
					<items basedir="${svnBase}/build/win32">
						<include name="svn_config.vcproj" />
						<include name="svn_locale.vcproj" />
						<include name="zlib.vcproj" />
						<include name="../../apr/**.vcproj" />
						<include name="../../apr-util/**.vcproj" />
					</items>
				</in>
				<do>
					<VCProjAddPlatform project="${vcproj}" platform="${platform}" fromPlatform="win32" />
				</do>
			</foreach>
			<foreach item="File" property="vcproj">
				<in>
					<items basedir="${svnBase}\build\win32">
						<include name="**/*.vcproj" />
						<include name="../../apr/apr.vcproj" />
						<include name="../../apr-util/aprutil.vcproj" />
						<include name="../../serf/serf.vcproj" />
						<include name="../../apr-util/xml/expat/lib/xml.vcproj" />
					</items>
				</in>
				<do>
					<loadfile file="${vcproj}" property="projtext">
						<filterchain>
							<replacestring from='PreprocessorDefinitions="WIN32' to='PreprocessorDefinitions="APR_DECLARE_STATIC;APU_DECLARE_STATIC;API_DECLARE_STATIC;WIN32;_CRT_NONSTDC_NO_DEPRECATE;_CRT_SECURE_NO_DEPRECATE;' />
							<replacestring from='AdditionalDependencies="zlibstat.lib' to='AdditionalDependencies="Rpcrt4.lib Mswsock.lib zlibstat.lib' />
							<!-- Favor size over speed. Subversion is IO bound, not cpu bound -->
							<replacestring from='Optimization="2"' to='Optimization="1"' />
							<replacestring from='FavorSizeOrSpeed="1"' to='FavorSizeOrSpeed="0"' />
							<replacestring from='InlineFunctionExpansion="2"' to='' />
							<!-- Increase security a little little bit in some cases -->
							<replacestring from='BufferSecurityCheck="FALSE"' to='BufferSecurityCheck="true"' />
						</filterchain>
					</loadfile>
					<echo message="${projtext}" file="${vcproj}" />
				</do>
			</foreach>
		</OnceBlock>>
	</target>
	<target name="build-apr" depends="download,extract,checkout, generate-svnfiles, prepare-apr">
		<OnceBlock file="build/apr-${aprVersion}_${platform}.build">
			<!-- Prepare static builds (requires changed build order) -->
			<foreach item="File" property="project">
				<in>
					<items basedir="${svnBase}">
						<include name="apr/apr.vcproj" />
						<include name="apr-util/aprutil.vcproj" />
						<include name="apr-util/xml/expat/lib/xml.vcproj" />
					</items>
				</in>
				<do>
					<VCBuild platform="${platform}">
						<arg value="${project}" />
						<arg value="${Configuration}|${platform}" />
					</VCBuild>
				</do>
			</foreach>
		</OnceBlock>
		<copy file="${svnBase}/apr/libr/apr-1.lib" tofile="${svnBase}/apr/Release/libapr-1.lib" />
		<copy file="${svnBase}/apr-util/libr/aprutil-1.lib" tofile="${svnBase}/apr-util/Release/libaprutil-1.lib" />
		<copy todir="${release}/lib" flatten="true">
			<fileset basedir="build/win32/subversion">
				<include name="apr\LibR\apr-1.lib" />
				<include name="apr-util\LibR\aprutil-1.lib" />
			</fileset>
		</copy>
		<copy todir="${release}/lib-x64" flatten="true">
			<fileset basedir="build/x64/subversion">
				<include name="apr\LibR\apr-1.lib" />
				<include name="apr-util\LibR\aprutil-1.lib" />
			</fileset>
		</copy>
		<property name="aprIncludeDir" value="${release}/include/apr-1" />
		<copy todir="${aprIncludeDir}">
			<fileset basedir="${svnBase}/apr/include">
				<include name="*.h" />
			</fileset>
		</copy>
		<copy todir="${aprIncludeDir}">
			<fileset basedir="${svnBase}/apr/include">
				<include name="*.h" />
			</fileset>
		</copy>
	</target>
	<target name="build-svn" depends="build-bdb,build-zlib,build-openssl,build-apr,build-serf,prepare-neon,generate-svnfiles">
		<OnceBlock file="build/subversion-${subversionVersion}_${platform}.build">
			<!-- Now build subversion -->
			<exec program="msbuild.exe" workingdir="${svnBase}">
				<arg value="/nologo" />
				<arg value="/verbosity:quiet" />
				<arg value="subversion_vcnet.sln" />
				<arg value="/p:Configuration=Release" />
				<arg value="/p:Platform=${platform}" />
				<arg value="/t:__LIBS__" />
				<arg value="/t:svn" />
			</exec>
		</OnceBlock>
	</target>
	<target name="copy-result" depends="build-svn">
		<copy todir="${release}/lib" flatten="true">
			<fileset basedir="build/win32/subversion">
				<include name="${Configuration}/**/*.lib" />
				<include name="${Configuration}/**/*.pdb" />
				<include name="neon/**/*.lib" />
				<include name="serf/${Configuration}/*.lib" />
				<include name="serf/${Configuration}/*.pdb" />
				<include name="neon/**/*.pdb" />
				<include name="apr-util/xml/**/*.lib" />
				<include name="apr-util/xml/**/*.pdb" />

				<!-- Don't copy the GPL as a *.lib file -->
				<exclude name="neon/src/COPYING.LIB" />

				<include name="apr*/LibR/*.lib" />
				<include name="apr*/LibR/*.pdb" />
			</fileset>
		</copy>
		<copy todir="${release}/lib-x64" flatten="true">
			<fileset basedir="build/x64/subversion">
				<include name="x64/${Configuration}/**/*.lib" />
				<include name="x64/${Configuration}/**/*.pdb" />
				<include name="neon/**/*.lib" />
				<include name="serf/${Configuration}/*.lib" />
				<include name="serf/${Configuration}/*.pdb" />
				<include name="neon/**/*.pdb" />
				<include name="apr-util/xml/**/*.lib" />
				<include name="apr-util/xml/**/*.pdb" />

				<!-- Don't copy the GPL as a *.lib file -->
				<exclude name="neon/src/COPYING.LIB" />

				<include name="apr*/x64/LibR/*.lib" />
				<include name="apr*/x64/LibR/*.pdb" />
			</fileset>
		</copy>
		<copy file="${svnBase}/release/subversion/svn/svn.exe" tofile="${release}/bin/svn-${platform}.exe" />
		<copy todir="${release}/include">
			<fileset basedir="${svnBase}\subversion\include">
				<include name="**/*.h" />
			</fileset>
		</copy>
		<copy todir="${release}/include/serf">
			<fileset basedir="${svnBase}\serf">
				<include name="**/*.h" />
			</fileset>
		</copy>
		<copy todir="${release}/include/neon">
			<fileset basedir="${svnBase}\neon\src">
				<include name="**/*.h" />
			</fileset>
		</copy>
		<copy todir="${release}/include/apr-1">
			<fileset basedir="${svnBase}\apr\include">
				<include name="**.h" />
			</fileset>
		</copy>
		<copy todir="${release}/include/apr-1">
			<fileset basedir="${svnBase}\apr-util\include">
				<include name="**.h" />
			</fileset>
		</copy>
		<copy todir="${release}/lib-AnyCPU">
			<fileset basedir="${nunitDir}/bin">
				<include name="nunit.framework.dll" />
				<include name="nunit.framework.xml" />
			</fileset>
		</copy>
	</target>
	<target name="build" depends="download,extract,checkout, build-bdb, build-zlib, build-svn, copy-result">

	</target>
</project>
