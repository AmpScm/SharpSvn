<?xml version="1.0" ?>
<project basedir=".." default="build">

  <property name="junitFilename" value="junit${junitVersion}.zip" />
  <property name="junitDir" value="${buildRoot}\junit${junitVersion}" />
  <property name="junitJar" value="${junitDir}\junit-${junitVersion}.jar" />

  <property name="cmakeFilename" value="cmake-${cmakeVersion}-windows-i386.zip" />
  <property name="cmakeDir" value="build/cmake-${cmakeVersion}-windows-i386" />

  <property name="nasmFilename" value="nasm-${nasmVersion}-win32.zip" />
  <property name="nasmDir" value="${buildRoot}\nasm-${nasmVersion}" />

  <property name="sconsFilename" value="scons-local-${sconsVersion}.zip" />

  <property name="refasmerFilename" value="Refasmer.net461.${refasmerVersion}.zip" />

  <target name="download" depends="initialize-layout">
    <mkdir dir="${downloads}" />

    <get
      src="https://download.oracle.com/berkeley-db/${dbFilename}"
      dest="${downloads + dbFilename}"
      unless="${file::exists(downloads + dbFilename)}" />

    <get src="https://www.nasm.us/pub/nasm/releasebuilds/${nasmVersion}/win32/${nasmFilename}"
      dest="${downloads + nasmFilename}"
      unless="${file::exists(downloads + nasmFilename)}" />

    <get src="https://github.com/Kitware/CMake/releases/download/v${cmakeVersion}/${cmakeFilename}"
      dest="${downloads + cmakeFilename}"
      unless="${file::exists(downloads + cmakeFilename)}" />

    <get
       src="http://svnbook.red-bean.com/en/1.7/svn-book.pdf"
       dest="${downloads + 'svn-book.pdf'}"
       unless="${file::exists(downloads + 'svn-book.pdf')}"
       if="${getSvnBook}" />

    <get
      src="https://prdownloads.sourceforge.net/swig/${swigFilename}"
      dest="${downloads + swigFilename}"
      unless="${file::exists(downloads + swigFilename)}"
      if="${property::exists('withSwig')}" />

    <if test="${intl == 'gettext'}">
      <get
        src="https://ftpmirror.gnu.org/gettext/${gettextFilename}"
        dest="${downloads + gettextFilename}"
        unless="${file::exists(downloads + gettextFilename)}" />

      <get
        src="https://prdownloads.sourceforge.net/gettext/${gettextToolsFilename}"
        dest="${downloads + gettextToolsFilename}"
        unless="${file::exists(downloads + gettextToolsFilename)}" />

      <get
        src="https://prdownloads.sourceforge.net/gettext/${gettextToolsRuntimeFilename}"
        dest="${downloads + gettextToolsRuntimeFilename}"
        unless="${file::exists(downloads + gettextToolsRuntimeFilename)}" />

      <get
        src="https://prdownloads.sourceforge.net/gettext/${gettextToolsIconvFilename}"
        dest="${downloads + gettextToolsIconvFilename}"
        unless="${file::exists(downloads + gettextToolsIconvFilename)}" />
    </if>

    <get
      src="https://prdownloads.sourceforge.net/junit/junit/${junitVersion}/${junitFilename}"
      dest="${downloads + junitFilename}"
      unless="${file::exists(downloads + junitFilename)}"
      if="${javaHome != '' and buildJavaHL}" />

    <get
      src="https://prdownloads.sourceforge.net/scons/${sconsFilename}"
      dest="${downloads + sconsFilename}"
      unless="${file::exists(downloads + sconsFilename)}" />


    <get
      src="https://github.com/JetBrains/Refasmer/releases/download/${refasmerVersion}/Refasmer.net461.${refasmerVersion}.zip"
      dest="${downloads + refasmerFilename}"
      unless="${file::exists(downloads + refasmerFilename)}" />
  </target>

  <target name="extract" depends="download">
    <mkdir dir="build" />

    <untar
      src="${downloads + dbFilename}" compression="gzip"
      dest="build"
      unless="${directory::exists('build/db-' + dbVersion + '.NC')}" />

    <unzip
      zipfile="${downloads + nasmFilename}"
      todir="build"
      encoding="utf-8"
      unless="${directory::exists(nasmDir)}" />

    <unzip
      zipfile="${downloads + cmakeFilename}"
      todir="build"
      encoding="utf-8"
      unless="${directory::exists(cmakeDir)}" />

    <unzip
      zipfile="${downloads + sconsFilename}"
      todir="build/scons"
      encoding="utf-8"
      unless="${directory::exists('build/scons')}" />

    <if test="${property::exists('withSwig') and not directory::exists(swigDir)}">
      <unzip
        zipfile="${downloads + swigFilename}"
        todir="build"
        encoding="utf-8" />
    </if>
    <if test="${intl == 'gettext'}">
      <untar
        src="${downloads + gettextFilename}" compression="gzip"
        dest="build"
        unless="${directory::exists(gettextDir)}" />
    </if>
    <if test="${intl == 'gettext' and not directory::exists(gettextToolsDir)}">
      <unzip
        zipfile="${downloads + gettextToolsFilename}"
        todir="${gettextToolsDir}"
        encoding="utf-8" />
      <unzip
        zipfile="${downloads + gettextToolsRuntimeFilename}"
        todir="${gettextToolsDir}"
        encoding="utf-8" />
      <unzip
        zipfile="${downloads + gettextToolsIconvFilename}"
        todir="${gettextToolsDir}"
        encoding="utf-8" />
    </if>
    <unzip
      zipfile="${downloads + junitFilename}"
      todir="build"
      encoding="utf-8"
      unless="${directory::exists(junitDir)}"
      if="${javaHome != '' and buildJavaHL}" />

    <unzip
      zipfile="${downloads + refasmerFilename}"
      todir="build/refasmer"
      encoding="utf-8"
      unless="${directory::exists('build/refasmer')}" />

  </target>
</project>
