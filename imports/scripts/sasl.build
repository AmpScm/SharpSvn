<?xml version="1.0" ?>
<project basedir=".." default="build">
  <property name="saslDir" value="build/${platform}/cyrus-sasl-${saslVersion}" />
  <property name="saslFilename" value="cyrus-sasl-${saslVersion}.tar.gz" />

  <regex pattern="^(?'SASL_MAJOR_VERSION'\d+)\.(?'SASL_MINOR_VERSION'\d+)\.(?'SASL_MICRO_VERSION'\d+)" input="${saslVersion}" />

  <property name="saslDllName" value="libsasl.dll" if="${dllPrefix==''}" />
  <property name="saslPrefix" value="${dllPrefix}Sasl${SASL_MAJOR_VERSION}${SASL_MINOR_VERSION}-${SASL_MICRO_VERSION}-${platform}" if="${dllPrefix!=''}"/>
  <property name="saslPdb" value="sasl.pdb" if="${dllPrefix==''}"/>
  <property name="saslPdb" value="${saslPrefix}.pdb" if="${dllPrefix!=''}"/>
  <property name="saslDllName" value="${saslPrefix}.${svnDll}" if="${dllPrefix!=''}"/>

  <target name="prepare-sasl" depends="checkout,build-bdb,build-openssl">
    <OnceBlock file="build/sasl-${saslVersion}_${platform}.prepared">
      <loadfile file="${saslDir}/win32/include/config.h" property="propText">
        <filterchain>
          <replacestring from='/* which mechs can we link staticly? */' to='#define STATIC_NTLM 1 /* Which mechs can we link staticly?  */ ' />
          <replacestring from='#define STATIC_OTP 1' to='/* #undef STATIC_OTP */' />
          <replacestring from='#define STATIC_SRP 1' to='/* #undef STATIC_SRP */' />
          <replacestring from='#define STATIC_GSSAPIV2 1' to='/* #undef STATIC_GSSAPIV2 */' />
          <replacestring from='typedef int ssize_t;' to='typedef INT_PTR ssize_t;' />
        </filterchain>
      </loadfile>
      <echo message="${propText}" file="${saslDir}/win32/include/config.h" />
      <echo message='

/* SharpSvn */
/* SharpSvn */
#include &lt;windows.h&gt;
#include &lt;winsock2.h&gt;
#include &lt;Ws2tcpip.h&gt;
#include &lt;wspiapi.h&gt;
/* /SharpSvn */

' file="${saslDir}/win32/include/config.h" append="true" />
      <loadfile file="${saslDir}/NTMakefile" property="propText">
        <filterchain>
          <replacestring
            from='SUBDIRS=lib plugins utils sample'
            to='SUBDIRS=plugins lib' />
        </filterchain>
      </loadfile>
      <echo message="${propText}" file="${saslDir}/NTMakefile" />

      <property name="linkAddendum" value="" />
      <property name="linkAddendum" value="/MACHINE:x64" if="${platform=='x64'}" />

      <loadfile file="${saslDir}/include/prop.h" property="propText" if="${static=='true'}" >
        <filterchain>
          <replacestring from='WIN32' to='no_WIN32_exports' />
        </filterchain>
      </loadfile>
      <echo message="${propText}" file="${saslDir}/include/prop.h" if="${static=='true'}" />
      <loadfile file="${saslDir}/plugins/NTMakefile" property="propText">
        <filterchain>
          <replacestring from='CPPFLAGS = /D NEED_GETOPT' to='CPPFLAGS = /D _CRT_SECURE_NO_WARNINGS /D NEED_GETOPT' />
          <replacestring from='$(LINK32DLL_FLAGS) /out' to='$(LINK32DLL_FLAGS) ${linkAddendum} /out' />
          <replacestring from='/D "WIN32"' to='/D "WIN32" /D "WIN64"' if="${platform=='x64'}" />
        </filterchain>
      </loadfile>
      <echo message="${propText}" file="${saslDir}/plugins/NTMakefile" />

      <loadfile file="${saslDir}/lib/NTMakefile" property="propText">
        <filterchain>
          <replacestring
            from='CPPFLAGS = /D NEED_GETOPT'
            to='CPPFLAGS = /Gy /Zi /Zl /O1 /D NTLM_STATIC=1 /D _CRT_SECURE_NO_WARNINGS /D NEED_GETOPT /I "$(OPENSSL_INCLUDE)"' />
          <replacestring from=' windlopen.c ' to=' dlopen.c ../plugins/ntlm.c ../plugins/digestmd5.c ../plugins/crammd5.c ../plugins/login.c ../plugins/plain.c ../plugins/anonymous.c ../plugins/sasldb.c ../plugins/allockey.c ../plugins/db_berkeley.c ' />
          <replacestring from=' windlopen.obj ' to=' dlopen.obj ../plugins/ntlm.obj ../plugins/digestmd5.obj ../plugins/cram.obj ../plugins/login.obj ../plugins/plain.obj ../plugins/anonymous.obj ../plugins/sasldb.obj ../plugins/allockey.obj ../plugins/db_berkeley.obj ' />
          <replacestring from='$(LINK32DLL_FLAGS) /out' to='$(LINK32DLL_FLAGS) ${linkAddendum} /out' />
          <replacestring from='/implib:"libsasl.lib" /pdb:"libsasl.pdb" ' to='/implib:"libsasl.lib" /pdb:"${saslPdb}" /libpath:$(OPENSSL_LIBPATH) libeay32.lib ssleay32.lib /libpath:$(DB_LIBPATH) $(DB_LIB) delayimp.lib zlib.lib /delayload:${fullDbDllName} '/>
          <replacestring from='libsasl.dll' to='${saslDllName}' if="${dllPrefix != ''}" />
          <replacestring from='/D "WIN32"' to='/D "WIN32" /D "WIN64"' if="${platform=='x64'}" />
        </filterchain>
      </loadfile>
      <loadfile file="${saslDir}/lib/NTMakefile" property="propTextStatic">
        <filterchain>
          <replacestring
            from='CPPFLAGS = /D NEED_GETOPT'
            to='CPPFLAGS = /Gy /Zi /Zl /O1 /D NTLM_STATIC=1 /D _CRT_SECURE_NO_WARNINGS /D NEED_GETOPT /I "$(OPENSSL_INCLUDE)"' />
          <replacestring from=' windlopen.c ' to=' dlopen.c ../plugins/ntlm.c ../plugins/digestmd5.c ../plugins/crammd5.c ../plugins/login.c ../plugins/plain.c ../plugins/anonymous.c ../plugins/sasldb.c ../plugins/allockey.c ../plugins/db_berkeley.c ' />
          <replacestring from=' windlopen.obj ' to=' dlopen.obj ../plugins/ntlm.obj ../plugins/digestmd5.obj ../plugins/cram.obj ../plugins/login.obj ../plugins/plain.obj ../plugins/anonymous.obj ../plugins/sasldb.obj ../plugins/allockey.obj ../plugins/db_berkeley.obj ' />
          <replacestring from='$(LINK32DLL_FLAGS) /out' to='${linkAddendum} /out' />
          <replacestring from=' $(libsasl_res)' to='' />
          <replacestring from='$(LINK32DLL)' to='$(LIB32) -lib' />
          <replacestring from='/implib:"libsasl.lib" ' to='' />
          <replacestring from='/pdb:"libsasl.pdb" ' to='' />
          <replacestring from='libsasl.dll' to='libsasl.lib' />
          <replacestring from='/D "WIN32"' to='/D "WIN32" /D "WIN64"' if="${platform=='x64'}" />
        </filterchain>
      </loadfile>
      <echo file="${saslDir}/lib/NTMakefile" message="${propText}"       if="${static!='true'}" />
      <echo file="${saslDir}/lib/NTMakefile" message="${propTextStatic}" if="${static=='true'}" />
      <loadfile file="${saslDir}/win32/common.mak" property="propText">
        <filterchain>
          <replacestring from='SYS_LIBS=' to='SYS_LIBS="/LIBPATH:${path::get-full-path(releaseLib)}" zlib.lib ' />
        </filterchain>
      </loadfile>
      <echo message="${propText}" file="${saslDir}/win32/common.mak" />
    </OnceBlock>
  </target>
  <target name="build-sasl" depends="prepare-sasl">
    <OnceBlock file="build/sasl-${saslVersion}_${platform}.build">
      <NMake workingdir="${saslDir}" makeFile="${saslDir}/NTMakefile" verbose="true">
        <arg value="TARGET_WIN_SYSTEM=50" />
        <!-- Win 2000+ -->
        <!-- BDB -->
        <arg value="DB_LIB=${libDb}.lib" />
        <arg value="DB_LIBPATH=${path::get-full-path('release\lib')}" if="${platform == 'win32'}"/>
        <arg value="DB_LIBPATH=${path::get-full-path('release\lib-x64')}" if="${platform == 'x64'}"/>
        <arg value="DB_INCLUDE=${path::get-full-path('release\include')}" />
        <!-- OpenSSL -->
        <arg value="OPENSSL_INCLUDE=${path::get-full-path(opensslDir + '\inc32')}" />
        <arg value="OPENSSL_LIBPATH=${path::get-full-path(opensslDir + '\out32')}" if="${static=='true'}" />
        <arg value="OPENSSL_LIBPATH=${path::get-full-path(opensslDir + '\out32dll')}" if="${static!='true'}" />
        <arg value="NTLM=1" />
        <arg value="NTLM_STATIC=1" />
      </NMake>
      <exec program="mt.exe" workingdir="${saslDir}/lib" if="${static!='true'}">
        <arg value="-manifest" />
        <arg value="${saslDllName}.manifest" />
        <arg value="-outputresource:${saslDllName};2" />
      </exec>
    </OnceBlock>
    <copy todir="build/${platform}/lib/lib">
      <fileset basedir="${saslDir}/lib">
        <include name="libsasl.lib" />
        <include name="${saslPdb}" />
      </fileset>
    </copy>
    <copy todir="build/${platform}/lib/include">
      <fileset basedir="${saslDir}/include">
        <include name="**/*.h" />
      </fileset>
    </copy>
    <copy todir="release/lib">
      <fileset basedir="build/win32/cyrus-sasl-${saslVersion}/lib">
        <include name="libsasl.lib" />
        <include name="${saslPdb}" />
      </fileset>
    </copy>
    <copy todir="release/lib-x64" if="${platform=='x64'}">
      <fileset basedir="build/x64/cyrus-sasl-${saslVersion}/lib">
        <include name="${dllPrefix}*.${svnDll}" />
        <include name="libsasl.lib" />
        <include name="${saslPdb}" />
      </fileset>
    </copy>
    <copy todir="release/bin">
      <fileset basedir="${saslDir}/lib">
        <include name="${saslDllName}" />
        <include name="${saslPdb}" />
      </fileset>
    </copy>
    <copy todir="release/include/sasl">
      <fileset basedir="${saslDir}/include">
        <include name="*.h" />
      </fileset>
    </copy>
    <copy todir="build/${platform}/lib/lib">
    <fileset basedir="${saslDir}/lib">
      <include name="*.dll" />
      <include name="*.${svnDll}" />
    </fileset>
  </copy>
  </target>
</project>