<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ACertificateFileIsRequiredForAccessingServerX" xml:space="preserve">
    <value>A client certificate is required for accessing server {0}.</value>
  </data>
  <data name="ACertificateFileIsRequiredForAccessingServerXatY" xml:space="preserve">
    <value>A client certificate is required for accessing server {0} at {1}.</value>
  </data>
  <data name="ConnectToSubversion" xml:space="preserve">
    <value>Connect to Subversion</value>
  </data>
  <data name="SshCertificateMismatch" xml:space="preserve">
    <value>WARNING - POTENTIAL SECURITY BREACH!

The server's host key does not match what has been cached. This means that either the server administrator has changed the host key, or you have actually connected to another computer pretending to be the server.

The new {0} key fingerprint is:
{1}

If you were expecting this change and trust the new key, choose YES.
If you want to carry on connecting but without updating the cache, choose NO.

If you want to abandon the connection completely, press CANCEL.

Choosing CANCEL is the ONLY guaranteed safe choice.</value>
  </data>
  <data name="SshCertificateMismatchCaption" xml:space="preserve">
    <value>Update cached host key?</value>
  </data>
  <data name="SshCertificateUnknown" xml:space="preserve">
    <value>The server's host key is not cached in the registry. You have no guarantee that the server is the computer you think it is.

The server's {0} key fingerprint is:
{1}

If you trust this host, choose YES to add the key to the cache and carry on connecting.
If you want to carry on connecting just once, without adding the key to the cache,
choose NO. If you do not want to connect at all, choose Cancel.</value>
  </data>
  <data name="SshCertificateUnknownCaption" xml:space="preserve">
    <value>Store key in cache?</value>
  </data>
  <data name="ThePassPhraseForTheClientCertificateForXatYIsRequired" xml:space="preserve">
    <value>The certificate for server {0} at {1} requires a passphrase.</value>
  </data>
  <data name="ThePassPhraseForTheClientCertificateForXIsRequired" xml:space="preserve">
    <value>The certificate for server {0} requires a passphrase.</value>
  </data>
  <data name="TheServerXatYRequiresAUsername" xml:space="preserve">
    <value>The server {0} at {1} requires a username.</value>
  </data>
  <data name="TheServerXatYRequiresAUsernameAndPassword" xml:space="preserve">
    <value>The server {0} at {1} requires a username and password.</value>
  </data>
  <data name="TheServerXRequiresAUsername" xml:space="preserve">
    <value>The server {0} requires a username.</value>
  </data>
  <data name="TheServerXRequiresAUsernameAndPassword" xml:space="preserve">
    <value>The server {0} requires a username and password.</value>
  </data>
</root>