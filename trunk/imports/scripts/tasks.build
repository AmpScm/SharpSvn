<project>
  <script language="C#">
    <references>
      <lib>
        <include name="${nant::get-base-directory() + '/lib'}" asis="true" />
        <include name="${nant::get-base-directory() + '/lib/common/neutral'}" asis="true" />
      </lib>
      <include name="System.dll" />
      <include name="System.Xml.dll" />
    </references>
    <imports>
      <import namespace="System.Xml"/>
      <import namespace="System.Xml.XPath"/>
      <import namespace="System.Diagnostics"/>
    </imports>
    <code>
      <![CDATA[			

public abstract class ExternalAppTask : NAnt.Core.Tasks.ExternalProgramBase
{
    DirectoryInfo _workingDirectory;

    protected override void PrepareProcess(Process process)
    {
        base.PrepareProcess(process);

        process.StartInfo.WorkingDirectory = this.WorkingDirectory.FullName;
    }

    [TaskAttribute("workingdir")]
    public DirectoryInfo WorkingDirectory
    {
        get
        {
            if (this._workingDirectory == null)
            {
                return base.BaseDirectory;
            }
            return this._workingDirectory;
        }
        set
        {
            this._workingDirectory = value;
        }
    }
}

[TaskName("VCBuild")]
public class VCBuild : NAnt.Core.Tasks.ExternalProgramBase
{
    bool _showLogo;
    string _platform;
    string _configuration;

    [TaskAttribute("nologo", Required = false), BooleanValidator]
    public bool NoLogo
    {
        get { return !_showLogo; }
        set { _showLogo = !value; }
    }

    public override string ProgramFileName
    {
        get { return "vcbuild.exe"; }
    }

    [TaskAttribute("platform")]
    public string Platform
    {
        get { return _platform; }
        set { _platform = value; }
    }

    [TaskAttribute("configuration")]
    public string Configuration
    {
        get { return _configuration; }
        set { _configuration = value; }
    }

    public override string ProgramArguments
    {
        get
        {
            StringBuilder sb = new StringBuilder();

            if (NoLogo)
                sb.Append(" /nologo");

            if (Platform != null)
                sb.AppendFormat(" /platform:{0}", Platform);

            return sb.Length > 0 ? sb.ToString().Substring(1) : ""; // Remove first space
        }
    }

    protected override void ExecuteTask()
    {
        if (Configuration != null)
            Arguments.Add(new NAnt.Core.Types.Argument(Configuration));

        base.ExecuteTask();
    }
}

[TaskName("Svn")]
public class Svn : NAnt.Core.Tasks.ExternalProgramBase
{
    bool _interactive;
    public override string ProgramArguments
    {
        get { return _interactive ? "" : "--non-interactive"; }
    }


    [TaskAttribute("nonInteractive")]
    public bool NonInteractive
    {
        get { return !_interactive; }
        set { _interactive = !value; }
    }
}

[TaskName("MSBuild")]
public class MSBuild : NAnt.Core.Tasks.ExternalProgramBase
{
    bool _showLogo;
    public override string ProgramArguments
    {
        get { return _showLogo ? "" : "/nologo"; }
    }

    [TaskAttribute("noLogo")]
    public bool NonInteractive
    {
        get { return !_showLogo; }
        set { _showLogo = !value; }
    }
}

[TaskName("NMake")]
public class NMake : ExternalAppTask
{
    FileInfo _makeFile;
    bool _showLogo;
    [TaskAttribute("makeFile", Required = true)]
    public FileInfo MakeFile
    {
        get { return _makeFile; }
        set { _makeFile = value; }
    }

    [TaskAttribute("nologo", Required = false), BooleanValidator]
    public bool NoLogo
    {
        get { return !_showLogo; }
        set { _showLogo = !value; }
    }

    public override string ProgramArguments
    {
        get { return string.Format("/f \"{0}\"{1}{2}", MakeFile.FullName, 
                                                       NoLogo ? " /NOLOGO" : "",
                                                       Verbose ? "" : " /S"); }
    }
}


[TaskName("OnceBlock")]
public class OnceBlock : NAnt.Core.TaskContainer
{
    FileInfo _touchFile;

    [TaskAttribute("file", Required = true)]
    public FileInfo TouchFile
    {
        get { return _touchFile; }
        set { _touchFile = value; }
    }

    protected override void ExecuteTask()
    {
        if (!_touchFile.Exists)
        {
            base.ExecuteTask();

            using (_touchFile.Create())
            {
                // Create NOP file if execute succeeded
            }
        }
    }
}

[TaskName("VCProjAddPlatform")]
public class VCProjAddPlatform : NAnt.Core.Task
{
    FileInfo _project;
    string _platform;
    string _fromPlatform;

    [TaskAttribute("project", Required = true)]
    public FileInfo ProjectFile
    {
        get { return _project; }
        set { _project = value; }
    }

    [TaskAttribute("platform", Required = true)]
    public string Platform
    {
        get { return _platform; }
        set { _platform = value; }
    }

    [TaskAttribute("fromPlatform", Required = true)]
    public string FromPlatform
    {
        get { return _fromPlatform; }
        set { _fromPlatform = value; }
    }

    protected override void ExecuteTask()
    {
        XmlDocument doc = new XmlDocument();
        doc.Load(ProjectFile.FullName);

        bool oldFound = false;

        foreach (XmlNode n in doc.SelectNodes("/VisualStudioProject/Platforms/Platform/@Name"))
        {
            if (0 == string.Compare(n.Value, Platform, true))
                return; // Already completed
            else if (0 == string.Compare(n.Value, FromPlatform, true))
            {
                FromPlatform = n.Value;
                oldFound = true;
            }
        }

        if (!oldFound)
            throw new Exception("FromPlatform not found");

        XmlElement el = doc.CreateElement("Platform");
        el.SetAttribute("Name", Platform);
        doc.SelectSingleNode("/VisualStudioProject/Platforms").AppendChild(el);

        foreach (XmlElement n in doc.SelectNodes("/VisualStudioProject/Configurations/Configuration"))
        {
            string name = n.GetAttribute("Name");
            if (!name.EndsWith("|" + FromPlatform))
                continue;


            XmlElement nn = (XmlElement)n.CloneNode(true);
            nn.SetAttribute("Name", name.Substring(0, name.Length - FromPlatform.Length) + Platform);
            
            string platformValue = null;
            switch (Platform.ToUpper())
            {
                case "X64":
                    platformValue = "17";
                    break;
                case "IA64":
                    platformValue = "error";
                    break;
            }

            foreach (XmlNode i in nn.SelectNodes("Tool/@TargetMachine"))
            {
                i.Value = platformValue;
            }
            
            foreach(XmlElement i in nn.SelectNodes("Tool[@Name='VCLinkerTool'] | Tool[@Name='VCLibrarianTool']"))
            {
                i.SetAttribute("TargetMachine", platformValue);
            }

            foreach (XmlNode i in nn.SelectNodes("@OutputDirectory | @IntermediateDirectory | .//@OutputFile | .//@TypeLibraryName | .//@PrecompiledHeaderFile | .//@ObjectFile | .//@ProgramDataBaseFileName | .//@ImportLibrary"))
            {
                if (i.Value.StartsWith(".\\"))
                    i.Value = Platform + '\\' + i.Value.Substring(2);
                else if (char.IsLetterOrDigit(i.Value, 0))
                    i.Value = Platform + '\\' + i.Value;
            }

            n.ParentNode.AppendChild(nn);
        }

        foreach (XmlElement n in doc.SelectNodes("/VisualStudioProject/Files//FileConfiguration"))
        {
            string name = n.GetAttribute("Name");
            if (!name.EndsWith("|" + FromPlatform))
                continue;

            XmlElement nn = (XmlElement)n.CloneNode(true);
            nn.SetAttribute("Name", name.Substring(0, name.Length - FromPlatform.Length) + Platform);

            n.ParentNode.AppendChild(nn);
        }


        doc.Save(ProjectFile.FullName);
    }
}

[TaskName("ApplyPatch")]
public class ApplyPatch : NAnt.Core.Tasks.ExternalProgramBase
{
    FileInfo _patchFile;
    DirectoryInfo _toDir;
    int _strip;

    [TaskAttribute("patchFile", Required = true)]
    public FileInfo PatchFile
    {
        get { return _patchFile; }
        set { _patchFile = value; }
    }

    public override string ProgramFileName
    {
        get
        {
            string app = Path.GetFullPath(Path.Combine(Properties["downloads"], "../scripts/patch.exe"));

            if (!File.Exists(app))
                app = base.ProgramFileName.Replace("ApplyPatch", "patch");

            return app;
        }
    }

    [TaskAttribute("toDir", Required = true)]
    public DirectoryInfo ToDir
    {
        get
        {
            return _toDir;
        }
        set
        {
            _toDir = value;
        }
    }

    public override string ProgramArguments
    {
        get { return string.Format("-f --unified \"--input={0}\" --strip={1} -d \"{2}\"", _patchFile.FullName, _strip, _toDir.FullName); }
    }
}

[TaskName("CMake")]
public class CMake : ExternalAppTask
{
    string _process;
    public override string ProgramFileName
    {
        get
        {
            string app = Path.GetFullPath(Path.Combine(Properties["cmakeDir"], "bin/cmake.exe"));

            if (!File.Exists(app))
                app = base.ProgramFileName;

            return app;
        }
    }
    
    [TaskAttribute("process")]
    public string Process
    {
        get { return _process; }
        set { _process = value; }
    }
    
    public override string ProgramArguments
    {
        get
        {
            string job;
            
            if (!string.IsNullOrEmpty(Process))
                job = string.Format("-P \"{0}\"", Process);
            else
                job = "--build .";
            return string.Format("-G \"{0}\" {1}", Properties["cmakeGenerator"], job);
        }
    }
}

]]>
    </code>
  </script>
</project>

